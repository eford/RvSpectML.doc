var documenterSearchIndex = {"docs":
[{"location":"types.html#","page":"Types","title":"Types","text":"CurrentModule = RvSpectML","category":"page"},{"location":"types.html#Types-Exported-by-RvSpectML-1","page":"Types","title":"Types Exported by RvSpectML","text":"","category":"section"},{"location":"types.html#","page":"Types","title":"Types","text":"Pages = [\"types.md\"]\nDepth = 3","category":"page"},{"location":"types.html#General-purpose-1","page":"Types","title":"General purpose","text":"","category":"section"},{"location":"types.html#","page":"Types","title":"Types","text":"Modules = [RvSpectML ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types.html#RvSpectML.AbstractChuckOfSpectrum","page":"Types","title":"RvSpectML.AbstractChuckOfSpectrum","text":"Abstract type for any ChunkOfSpectrum \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.AbstractInstrument","page":"Types","title":"RvSpectML.AbstractInstrument","text":"Abstract Base type for Instruments \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.AbstractInstrument1D","page":"Types","title":"RvSpectML.AbstractInstrument1D","text":"Abstract Base type for 1-D extracted spectra Should be specialized for specific instruments. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.AbstractInstrument2D","page":"Types","title":"RvSpectML.AbstractInstrument2D","text":"Abstract Base type for 2-D extracted spectra. Should be specialized for each instrument \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.AbstractSpectra","page":"Types","title":"RvSpectML.AbstractSpectra","text":"Abstract type for any Spectrum (or region of spectrum) \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.AbstractSpectra1D","page":"Types","title":"RvSpectML.AbstractSpectra1D","text":"Abstract type for any 1-d Spectrum (or region of spectrum) \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.AbstractSpectra2D","page":"Types","title":"RvSpectML.AbstractSpectra2D","text":"Abstract type for any 2-d Spectrum \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.AbstractSpectralTimeSeriesCommonWavelengths","page":"Types","title":"RvSpectML.AbstractSpectralTimeSeriesCommonWavelengths","text":"Abstract type for a time series of spectra that share a common wavelength grid. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.ChuckOfSpectrum","page":"Types","title":"RvSpectML.ChuckOfSpectrum","text":"ChuckOfSpectrum for views into Spectra1DBasic or Spectra2DBasic \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.ChunkList","page":"Types","title":"RvSpectML.ChunkList","text":"Struct containing an array of ChuckOfSpectrum \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.ChunkListTimeseries","page":"Types","title":"RvSpectML.ChunkListTimeseries","text":"Mtching lists of times and array of ChunkLists \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.ChunkWidthFixedΔlnλ","page":"Types","title":"RvSpectML.ChunkWidthFixedΔlnλ","text":"Functor to return a constant scale factor for chunk widths (regardless of wavelength passed)\n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.Generic1D","page":"Types","title":"RvSpectML.Generic1D","text":"Trait for genric 1D Extracted spectra \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.Generic2D","page":"Types","title":"RvSpectML.Generic2D","text":"Trait for generic 2D Extracted spectra  \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.Spectra1DBasic","page":"Types","title":"RvSpectML.Spectra1DBasic","text":"Basic struct for Spectra1D (or region of specturm) Instruments can specialize their own if additional data is avaliable. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.Spectra2DBasic","page":"Types","title":"RvSpectML.Spectra2DBasic","text":"Basic struct for Spectra2D (or region of specturm) Instruments can specialize their own if additional data is avaliable. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.SpectralTimeSeriesCommonWavelengths","page":"Types","title":"RvSpectML.SpectralTimeSeriesCommonWavelengths","text":"Time series of spectra that share a common wavelength grid. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RV-Related-Algorithms-1","page":"Types","title":"RV-Related Algorithms","text":"","category":"section"},{"location":"types.html#","page":"Types","title":"Types","text":"Modules = [RvSpectML.CCF, RvSpectML.RVFromCCF, RvSpectML.DCPCA, RvSpectML.Scalpels, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types.html#RvSpectML.CCF.AbstractCCFMaskShape","page":"Types","title":"RvSpectML.CCF.AbstractCCFMaskShape","text":"A struct implementing a specific mask shapes should be a subtype of AbstractCCFMaskShape.\n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.CCF.AbstractCCFPlan","page":"Types","title":"RvSpectML.CCF.AbstractCCFPlan","text":"A struct implementing a specific plans describing where the CCF is to be evaluated should be a subtype of AbstractCCFPlan. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.CCF.AbstractLineList","page":"Types","title":"RvSpectML.CCF.AbstractLineList","text":"A struct implementing a line list should be a subtype of AbstractLineList. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.CCF.BasicCCFPlan","page":"Types","title":"RvSpectML.CCF.BasicCCFPlan","text":"Basic plan for computing the CCF roughly between vcenter-vmax and vcenter+vmax with step size v_step. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.CCF.BasicCCFPlan-Union{Tuple{}, Tuple{LLT}, Tuple{MST}} where LLT<:RvSpectML.CCF.AbstractLineList where MST<:RvSpectML.CCF.AbstractCCFMaskShape","page":"Types","title":"RvSpectML.CCF.BasicCCFPlan","text":"BasicCCFPlan\n\nOptional arguments:\n\nmidpoint: (defaultvcenter)\nstep: (defaultvstep)\nmax: (defaultvmax)\n\n\n\n\n\n","category":"method"},{"location":"types.html#RvSpectML.CCF.BasicLineList","page":"Types","title":"RvSpectML.CCF.BasicLineList","text":"A basic line list for passing to compute CCFs. Contains (views into) arrays specifying the minimum and maximum wavelength range and weight for each line. \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.CCF.BasicLineList-Union{Tuple{AA}, Tuple{T}, Tuple{AA,AA}} where AA<:AbstractArray{T,1} where T<:Real","page":"Types","title":"RvSpectML.CCF.BasicLineList","text":"BasicLineList( λ, weight ) \n\n\n\n\n\n","category":"method"},{"location":"types.html#RvSpectML.CCF.TopHatCCFMask","page":"Types","title":"RvSpectML.CCF.TopHatCCFMask","text":"TopHatCCFMask The standard tophat mask with one parameter, it's half width as a velocity in m/s. Mask weights are stored separately in a line list.\n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.CCF.TopHatCCFMask","page":"Types","title":"RvSpectML.CCF.TopHatCCFMask","text":"TopHatCCFMask( ; halfwidth=defaultv_width ) \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.CCF.TopHatCCFMask-Tuple{AbstractInstrument}","page":"Types","title":"RvSpectML.CCF.TopHatCCFMask","text":"TopHatCCFMask( inst  ) \n\n\n\n\n\n","category":"method"},{"location":"types.html#RvSpectML.CCF.TopHatCCFMask-Tuple{Real}","page":"Types","title":"RvSpectML.CCF.TopHatCCFMask","text":"Functor for returning 1 for any Δv <= width.  \n\n\n\n\n\n","category":"method"},{"location":"types.html#Interpolation-Algorithms-1","page":"Types","title":"Interpolation Algorithms","text":"","category":"section"},{"location":"types.html#","page":"Types","title":"Types","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types.html#Instrument-specific-1","page":"Types","title":"Instrument specific","text":"","category":"section"},{"location":"types.html#","page":"Types","title":"Types","text":"Modules = [RvSpectML.EXPRES, RvSpectML.HARPSN, RvSpectML.NEID, RvSpectML.TheoreticalInstrument  ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types.html#RvSpectML.NEID.NEID1D","page":"Types","title":"RvSpectML.NEID.NEID1D","text":"Trait for 1D Extracted spectra from NEID \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.NEID.NEID2D","page":"Types","title":"RvSpectML.NEID.NEID2D","text":"Trait for 2D Extracted spectra from NEID \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.TheoreticalInstrument.TheoreticalInstrument1D","page":"Types","title":"RvSpectML.TheoreticalInstrument.TheoreticalInstrument1D","text":"Trait for 1D spectra from a theoretical instrument \n\n\n\n\n\n","category":"type"},{"location":"types.html#RvSpectML.TheoreticalInstrument.TheoreticalInstrument2D","page":"Types","title":"RvSpectML.TheoreticalInstrument.TheoreticalInstrument2D","text":"Trait for a 2D spectra from a theoretical instrument \n\n\n\n\n\n","category":"type"},{"location":"types.html#Other-1","page":"Types","title":"Other","text":"","category":"section"},{"location":"types.html#","page":"Types","title":"Types","text":"Modules = [Pipeline  ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"CurrentModule = RvSpectML","category":"page"},{"location":"functions.html#Functions-Exported-by-RvSpectML-1","page":"Functions","title":"Functions Exported by RvSpectML","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]\nDepth = 3","category":"page"},{"location":"functions.html#General-purpose-1","page":"Functions","title":"General purpose","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Modules = [RvSpectML ]\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions.html#Base.length-Union{Tuple{ACLT}, Tuple{ACLT}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"Base.length","text":"Return number of ChunkLists in a ChunkListTimeseries \n\n\n\n\n\n","category":"method"},{"location":"functions.html#Base.length-Union{Tuple{CLT}, Tuple{CLT}} where CLT<:AbstractChunkList","page":"Functions","title":"Base.length","text":"Return number of chunks in ChunkList \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.absorption_line-Union{Tuple{T}, Tuple{T}} where T<:Real","page":"Functions","title":"RvSpectML.absorption_line","text":"absorption_line(x; mid, width, depth)\n\nReturn a Gaussian absorption line profile evaluated at x.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.apply_doppler_boost!","page":"Functions","title":"RvSpectML.apply_doppler_boost!","text":"apply_doppler_boost!(spectrum, doppler_factor) -> typeof(spectrum)\napply_doppler_boost!(spectra, df) -> typeof(spectra)\n\nApply Doppler boost to spectra's λ's and update its metadata[:doppler_factor], so it will know how to undo the transform.\n\nArguments:\n\nspectrum::AbstractSpectra: spectrum to be boosted\ndoppler_factor::Real: boost factor (1 = noop)\n\nor\n\nspectra::AbstractArray{<:AbstractSpectra}: spectra to be boosted\ndf::DataFrame: provides :drift and :ssb_rv (in m/s) for calculating the Doppler boost for each spectrum\n\nTODO: Improve documentation formatting.  This can serve as a template.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.bin_spectra_consecutive-Tuple{AbstractSpectralTimeSeriesCommonWavelengths,Integer}","page":"Functions","title":"RvSpectML.bin_spectra_consecutive","text":"binspectraconsecutive Bins consecutive spectra from a SpectralTimeSeriesCommonWavelengths object\n\nWARNING:  Simply takes consecutive spectra, so some bins may be from spectra that weren't taken close together. TODO:  Create version that pays attention to timestamps.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.bin_spectra_max_Δt-Union{Tuple{AT}, Tuple{T}, Tuple{AbstractSpectralTimeSeriesCommonWavelengths,AT,Real}} where AT<:AbstractArray{T,1} where T<:Real","page":"Functions","title":"RvSpectML.bin_spectra_max_Δt","text":"binspectramax_Δt Bins spectra from a SpectralTimeSeriesCommonWavelengths object with a maximum spacing between observation times\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.bin_spectra_nightly-Union{Tuple{AT}, Tuple{T}, Tuple{AbstractSpectralTimeSeriesCommonWavelengths,AT}} where AT<:AbstractArray{T,1} where T<:Real","page":"Functions","title":"RvSpectML.bin_spectra_nightly","text":"binspectranightly Bins spectra from a SpectralTimeSeriesCommonWavelengths object with a maximum spacing between observation times\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.bin_times_consecutive-Union{Tuple{AT}, Tuple{T}, Tuple{AT,Integer}} where AT<:AbstractArray{T,1} where T<:Real","page":"Functions","title":"RvSpectML.bin_times_consecutive","text":"bintimesconsecutive( times, n ) Computes mean times from conseuctive bins of n times (to go with binconsecutivespectra). Returns floor(length(times)/n) elements.\n\nWARNING:  Simply takes consecutive times, so some bins may be from spectra that weren't taken close together. TODO:  Create version that pays attention to timestamps.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.calc_d2fluxdlnlambda2-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1}}} where T2<:Real where T1<:Real","page":"Functions","title":"RvSpectML.calc_d2fluxdlnlambda2","text":"Estimate numerical second derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.calc_dfluxdlnlambda-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1}}} where T2<:Real where T1<:Real","page":"Functions","title":"RvSpectML.calc_dfluxdlnlambda","text":"Estimate numerical derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.calc_doppler_factor","page":"Functions","title":"RvSpectML.calc_doppler_factor","text":"calcdopplerfactor(rv; v_perp)\n\nReturn the Doppler boost factor (non-relativistic) for rv in km/s.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.calc_mean_dfluxdlnlambda-Union{Tuple{URT}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,2},AbstractArray{T1,2},AbstractArray{T3,1},AbstractArray{URT,1}}} where URT<:AbstractUnitRange where T3<:Real where T2<:Real where T1<:Real","page":"Functions","title":"RvSpectML.calc_mean_dfluxdlnlambda","text":"Return mean numerical derivative of fluxes based on a common set of wavelengths.    Inputs: flux & var (2d) and λ (1d)\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.calc_mean_spectrum-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,2},AbstractArray{T2,2}}} where T2<:Real where T1<:Real","page":"Functions","title":"RvSpectML.calc_mean_spectrum","text":"Return mean flux (averaging over observations at different times, variance weighted) based on a common set of wavelengths.    Inputs: flux & var (2d: pixel, time)\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.calc_normalization-Union{Tuple{ACL}, Tuple{ACL}} where ACL<:AbstractChunkList","page":"Functions","title":"RvSpectML.calc_normalization","text":"Calc normalization of spectra based on average flux in a ChunkList. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.code_to_include_param_jl","page":"Functions","title":"RvSpectML.code_to_include_param_jl","text":"codetoreadparamjl( pathto_search )\n\nReturns a Code object.  After res = code_toread_param_jl( path_to_search ), execute eval(res) to actually include the param.jl file. This is useful since it allows variables to be placed into caller's namespace.\n\nWarning:  Malicious users could insert arbitrary code into param.jl.  Don't be a malicous user.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.find_overlapping_chunks-Tuple{DataFrames.DataFrame}","page":"Functions","title":"RvSpectML.find_overlapping_chunks","text":"Return indices of any chunks in df that have overlapping lambdahi[i] and lambdalo[i+1].  \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.get_λ_range-Union{Tuple{ACLT}, Tuple{ACLT}, Tuple{CLT}} where ACLT<:(AbstractArray{CLT,N} where N) where CLT<:AbstractSpectra","page":"Functions","title":"RvSpectML.get_λ_range","text":"Return the largest minimum wavelength and smallest maximum wavelength across an array of spectra. Calls getλrange(AbstractSpectra2D) that should be specialized for each instrument. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.make_chunk_list-Union{Tuple{AS}, Tuple{AS,DataFrames.DataFrame}} where AS<:AbstractSpectra","page":"Functions","title":"RvSpectML.make_chunk_list","text":"Return a ChunkList of best regions of spectrum with lines in lineline.     linelist is a DataFrame containing :lambdalo and :lambdahi.     Pads edges by Δ.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.make_clean_line_list_from_tellurics_expres-Union{Tuple{DT}, Tuple{ST}, Tuple{IT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{DataFrames.DataFrame,DT}} where DT<:AbstractArray{ST,1} where ST<:Spectra2DBasic{T1,T2,T3,A1,A2,A3,IT} where IT<:Union{EXPRES1D, EXPRES2D} where A3<:(AbstractArray{T3,N} where N) where T3<:Real where A2<:(AbstractArray{T2,N} where N) where T2<:Real where A1<:(AbstractArray{T1,N} where N) where T1<:Real","page":"Functions","title":"RvSpectML.make_clean_line_list_from_tellurics_expres","text":"makecleanlinelistfromtelluricsexpres(linelist, expresdata; Δvtoavoid_tellurics ) Returns a new line list that excludes lines with telluric contamination. Inputs:\n\nline_list:  Dataframe containing field lambda\nexpres_data:  Array of EXPRES spectra\nΔvtoavoid_tellurics:  in m/s\n\nOutputs:\n\nlinelistwithouttellurics:   DataFrame with fields, lambda, weight, lambdalo, and lambda_hi.\n\nWarning: Assumes a tellurics value in metadata for each spectra, such as is provided by EXPRES.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.make_grid_for_chunk-Union{Tuple{ACLT}, Tuple{ACLT,Integer}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectML.make_grid_for_chunk","text":"makegridfor_chunk Create a range with equal spacing between points with end points set based on union of all chunks in timeseries.\n\nArguments:\n\ntimeseries: ChunkListTimeseries\nchunk index:\noversample_factor: (1)\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.make_manifest-Tuple{String,Module}","page":"Functions","title":"RvSpectML.make_manifest","text":"makemanifest(targetsubdir::String, Inst::Module; [opts] ) Returns a dataframe containing a list of files to be read and some metadata (e.g., observation times)\n\nOptional arguements\n\nmaxspectratouse (defaultmaxspectrato_use)\npathstosearch (defaultpathsto_search)\nverbose = true\n\nWarning:  Malicious users could insert arbitrary code into data_paths.jl.  Don't be a malicous user.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.make_orders_into_chunks","page":"Functions","title":"RvSpectML.make_orders_into_chunks","text":"makeordersinto_chunks\n\nReturn a ChunkList with a region of spectrum from each order in orderstouse.\n\nArguments\n\nspectra<:AbstractSpectra\ninst:  Instrument trait that provides default values\n\nOptional arguments\n\norderstouse: Range or Array (orderstouse(inst))\npixelstouse: Array of Ranges (each from mincol to maxcol)\n\nor\n\nmincol: (mincol_default(inst,order)) and\nmaxcol: (maxcol_default(inst,order))\n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.make_spectral_time_series_common_wavelengths_with_selected_times-Union{Tuple{T1}, Tuple{STSCWT}, Tuple{STSCWT,AbstractArray{T1,1}}} where T1<:Integer where STSCWT<:AbstractSpectralTimeSeriesCommonWavelengths","page":"Functions","title":"RvSpectML.make_spectral_time_series_common_wavelengths_with_selected_times","text":"makespectraltimeseriescommonwavelengthswithselectedtimes( input, timeidx ) Returns a SpectralTimeSeriesCommonWavelengths, retaining only those times and spectra specified by timeidx.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.make_template_spectra-Union{Tuple{ACLT}, Tuple{ACLT}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectML.make_template_spectra","text":"maketemplatespectra( chunklisttimeseries, [ options ] ) Combine portions of spectra in a ChunkListTimeseries into a template stored as a SpectralTimeSeriesCommonWavelengths. Optionally remove radial velocities before combining spectra based on the :rv_est field in metadata.\n\nInputs:\n\nchunklisttimeseries\n\nOptional Parametes:\n\nremovervest (true)\noversample_factor (1)\nsmooth_factor (1)\nalg (:TemporalGP)\n\nOutputs\n\nmatrix:  timeseries interpolated to each wavelength in the form of a SpectralTimeSeriesCommonWavelengths\nf_mean:  mean flux\nvar_mean: variance of mean flux (WARNING: Not computed accurately yet)\nderiv:  dflux/dlnλ averaged over spectra\nderiv2: d²flux/dlnλ² averaged over spectra\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.merge_chunks-Tuple{DataFrames.DataFrame}","page":"Functions","title":"RvSpectML.merge_chunks","text":"Return DataFrame with specifications for each chunk which will contain one or more lines.     Input:  linelist a DataFrame with:     -  lambdalo, lambdahi, lambda, depth     Output:  DataFrame with     - lambdalo & lambdahi: boundaries for chunk     - lambda & linedepths: arrays with info about each line\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.normalize_spectrum!-Union{Tuple{ST}, Tuple{ST,Real}} where ST<:AbstractSpectra","page":"Functions","title":"RvSpectML.normalize_spectrum!","text":"Normalize spectrum, multiplying fluxes by scale_fac. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.num_chunks-Union{Tuple{ACLT}, Tuple{ACLT}} where ACLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectML.num_chunks","text":"Number of chunks in first chunklist in chunklist_timeseries. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.plot_spectrum_chunks-Union{Tuple{PT}, Tuple{CLT}, Tuple{CLT,Union{Integer, AbstractUnitRange}}} where PT<:RecipesBase.AbstractPlot where CLT<:AbstractChunkListTimeseries","page":"Functions","title":"RvSpectML.plot_spectrum_chunks","text":"plotspectrumchunks( chunklist, chunks ) Returns a plot based of flux versus wavelength for selected chunks from the spectra in chunklist.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.read_header-Tuple{String}","page":"Functions","title":"RvSpectML.read_header","text":"Read header from FITS file and return Dict with contents. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.read_linelist_espresso-Tuple{String}","page":"Functions","title":"RvSpectML.read_linelist_espresso","text":"Read line list in ESPRESSO csv format.\n\nESPRESSO format: lambda and weight. Warning: ESPRESSO masks don't provide line depth and sometimes include one entry for a blend of lines.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.read_linelist_vald-Tuple{String}","page":"Functions","title":"RvSpectML.read_linelist_vald","text":"Read line list in VALD csv format.    VALD format: lambdalo, lambdaahi and depth.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.read_manifest-Tuple{String}","page":"Functions","title":"RvSpectML.read_manifest","text":"Read manifest containing filename, bjd, target, and optionally additional metadata from CSV file. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.read_mask_espresso-Union{Tuple{String}, Tuple{CCWT}} where CCWT<:RvSpectML.AbstractCalcChunkWidth","page":"Functions","title":"RvSpectML.read_mask_espresso","text":"Read mask in ESPRESSO csv format.\n\nESPRESSO format: lambda and weight. Warning: ESPRESSO masks don't provide line depth and sometimes include one entry for a blend of lines.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.read_mask_vald-Union{Tuple{String}, Tuple{CCWT}} where CCWT<:RvSpectML.AbstractCalcChunkWidth","page":"Functions","title":"RvSpectML.read_mask_vald","text":"Read mask in VALD csv format.    VALD format: lambdalo, lambdaahi and depth.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.rms_rvs_within_night-Union{Tuple{}, Tuple{T2}, Tuple{T1}} where T2<:Real where T1<:Real","page":"Functions","title":"RvSpectML.rms_rvs_within_night","text":"rmsrvwithin_night(times, rvs) Return RMS of RVs taken within the same night\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.λ_air_to_vac-Tuple{Real}","page":"Functions","title":"RvSpectML.λ_air_to_vac","text":"Convert air wavelength (in Å) to vacuum wavelength Ref: https://www.astro.uu.se/valdwiki/Air-to-vacuum%20conversion      VALD3 tools use the following solution derived by N. Piskunov\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.λ_vac_to_air-Tuple{Real}","page":"Functions","title":"RvSpectML.λ_vac_to_air","text":"Convert vacuum wavelength (in Å) to air wavelength Ref: Donald Morton (2000, ApJ. Suppl., 130, 403) via      https://www.astro.uu.se/valdwiki/Air-to-vacuum%20conversion\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RV-Related-Algorithms-1","page":"Functions","title":"RV-Related Algorithms","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Modules = [RvSpectML.CCF, RvSpectML.RVFromCCF, RvSpectML.DCPCA, RvSpectML.Scalpels, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions.html#RvSpectML.CCF.calc_ccf_chunk-Union{Tuple{AbstractChuckOfSpectrum}, Tuple{PlanT}, Tuple{AbstractChuckOfSpectrum,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Functions","title":"RvSpectML.CCF.calc_ccf_chunk","text":"calcccfchunk( chunk, ccf_plan ) Convenience function to compute CCF for one chunk of spectrum.\n\nInputs:\n\nchunk\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\n\nReturn:\n\nCCF for one chunk of spectrum, evaluated using mask_shape and line list from ccf plan\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.CCF.calc_ccf_chunklist-Union{Tuple{PlanT}, Tuple{AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Functions","title":"RvSpectML.CCF.calc_ccf_chunklist","text":"calcccfchunklist ( chunklist, ccf_plans ) Convenience function to compute CCF based on a spectrum's chunklist.\n\nInputs:\n\nchunklist\nvector of ccf plans (one for each chunk)\n\nOptional Arguments:\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the line list and mask_shape from the ccf plan for each chunk.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.CCF.calc_ccf_chunklist_timeseries-Union{Tuple{AbstractChunkListTimeseries}, Tuple{PlanT}, Tuple{AbstractChunkListTimeseries,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Functions","title":"RvSpectML.CCF.calc_ccf_chunklist_timeseries","text":"calcccfchunklisttimeseries( chunklisttimeseries, line_list ) Convenience function to compute CCF for a timeseries of spectra, each with a chunklist. Uses multiple threads if avaliable.\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\nverbose (false)\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the ccfplan. Note that the ccfplan provided is used as a template for creating a custom ccfplan for each chunk that     only includes lines that reliably appear in that order for all spectra in the chunklisttimeseries.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.CCF.calc_ccf_v_grid-Tuple{RvSpectML.CCF.BasicCCFPlan}","page":"Functions","title":"RvSpectML.CCF.calc_ccf_v_grid","text":"calcccfvgrid( plan ) Return range with 2n+1 points between -vmax and v_max where CCF is to be evaluated. Units based on those in plan.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.CCF.ccf_1D!-Union{Tuple{PlanT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2,A3}, Tuple{A1,A2,A3,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Functions","title":"RvSpectML.CCF.ccf_1D!","text":"ccf_1D!(ccf_out, λs, fluxes; ccf_plan )\n\nCompute the cross correlation function of a spectrum with a mask.\n\nInputs:\n\nccfout: 1-d array of size length(calcccfvgrid(plan)) to store output\nλs: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\n\nOptional Arguments:\n\nplan:  parameters for computing ccf (BasicCCFPlan()), including maskshape and linelist\nplan.line_list:  Each mask entry consists of the left and right end of tophats and a weight.\nplan.mask_shape: shape of mask to use (currently only works with TopHatCCFMask())\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.CCF.ccf_1D-Union{Tuple{PlanT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A2,A3}, Tuple{A2,A3,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Functions","title":"RvSpectML.CCF.ccf_1D","text":"ccf_1D( λs, fluxes; ccf_plan )\n\nCompute the cross correlation function of a spectrum with a mask.\n\nInputs:\n\nλs: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\n\nOptional Arguments:\n\nccf_plan:  parameters for computing ccf (BasicCCFPlan())\n\nReturns:\n\n1-d array of size length(calcccfv_grid(plan))\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.CCF.ccf_1D_expr!-Union{Tuple{PlanT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2,A3}, Tuple{A1,A2,A3,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Functions","title":"RvSpectML.CCF.ccf_1D_expr!","text":"ccf_1D_expr!(ccf_out, λs, fluxes; ccf_plan )\n\nCompute the cross correlation function of a spectrum with a mask.     Experimental version that should work with different mask shapes.     Need to understand why difference before merging this in.\n\nInputs:\n\nccfout: 1-d array of size length(calcccfvgrid(plan)) to store output\nλs: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\n\nOptional Arguments:\n\nplan:  parameters for computing ccf (BasicCCFPlan())\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.CCF.ccf_1D_expr-Union{Tuple{PlanT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A2,A3}, Tuple{A2,A3,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Functions","title":"RvSpectML.CCF.ccf_1D_expr","text":"ccf_1D_expr(ccf_out, λs, fluxes; ccf_plan )\n\nCompute the cross correlation function of a spectrum with a mask. Experimental version to allow for flexible mask shapes.\n\nInputs:\n\nλs: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\n\nOptional Arguments:\n\nccf_plan:  parameters for computing ccf (BasicCCFPlan())\n\nReturns:\n\n1-d array of size length(calcccfv_grid(plan))\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.RVFromCCF.measure_rv_from_ccf-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Functions","title":"RvSpectML.RVFromCCF.measure_rv_from_ccf","text":"measure_rv_from_ccf(vels, ccf; fit_type=\"gaussian\")\n\nFit a gaussian to the CCF to calculate a velocity using the specified method. Valid arguments for fit_type include \"gaussian\", \"quadratic\", and \"centroid\".\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.RVFromCCF.measure_rvs_from_ccf-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Functions","title":"RvSpectML.RVFromCCF.measure_rvs_from_ccf","text":"measure_rvs_from_ccf(vels, ccf; fit_type=\"gaussian\")\n\nAt each time, compute the cross correlation function and fit to calculate a velocity using the specified method. Valid arguments for fit_type include \"gaussian\", \"quadratic\", and \"centroid\".\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Interpolation-Algorithms-1","page":"Functions","title":"Interpolation Algorithms","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPrivate = false\nOrder = [:function ]","category":"page"},{"location":"functions.html#RvSpectML.LinearInterpolation.make_interpolator_linear_var-Union{Tuple{Union{AS, AC}}, Tuple{AC}, Tuple{AS}} where AC<:AbstractChuckOfSpectrum where AS<:AbstractSpectra","page":"Functions","title":"RvSpectML.LinearInterpolation.make_interpolator_linear_var","text":"Return interpolator for variances in spectra. \n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.SincInterpolation.spectra_interpolate-Union{Tuple{V4}, Tuple{T4}, Tuple{V3}, Tuple{T3}, Tuple{V2}, Tuple{T2}, Tuple{V1}, Tuple{T1}, Tuple{V1,V2,V3}} where V4<:AbstractArray{T4,1} where T4<:Real where V3<:AbstractArray{T3,1} where T3<:Real where V2<:AbstractArray{T2,1} where T2<:Real where V1<:AbstractArray{T1,1} where T1<:Real","page":"Functions","title":"RvSpectML.SincInterpolation.spectra_interpolate","text":"Original author: Joe Ninan Converted to Julia and optimized by Christian Gilbertson Further adapted/optimized by Eric Ford Additional optimizations possible by preallocating arrasy for minargs, Nminargs, minvalues, FilterValues and OldYCoords.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Instrument-specific-1","page":"Functions","title":"Instrument-specific","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Modules = [RvSpectML.EXPRES, RvSpectML.HARPSN, RvSpectML.NEID, RvSpectML.TheoreticalInstrument  ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"functions.html#RvSpectML.EXPRES.read_data","page":"Functions","title":"RvSpectML.EXPRES.read_data","text":"Read EXPRES data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.NEID.make_manifest-Tuple{String}","page":"Functions","title":"RvSpectML.NEID.make_manifest","text":"Create Dataframe containing filenames and key data for all files neid*.fits in directory\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.NEID.read_barycentric_corrections!","page":"Functions","title":"RvSpectML.NEID.read_barycentric_corrections!","text":"Read CSV of NEID barycentric corrections, interpolate to bjd's in df and insert into df[:,ssb_rv]. \n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.NEID.read_data","page":"Functions","title":"RvSpectML.NEID.read_data","text":"Read NEID (non-solar) data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.NEID.read_drift_corrections!","page":"Functions","title":"RvSpectML.NEID.read_drift_corrections!","text":"Read CSV of NEID drift corrections, interpolate to bjd's in df and insert into df[:,drift]. \n\n\n\n\n\n","category":"function"},{"location":"functions.html#RvSpectML.NEID.read_metadata-Tuple{String}","page":"Functions","title":"RvSpectML.NEID.read_metadata","text":"Create Dict containing filename and default metadata from file.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#RvSpectML.NEID.read_solar_data","page":"Functions","title":"RvSpectML.NEID.read_solar_data","text":"Read NEID Solar data from FITS file, and return in a Spectra2DBasic object.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#Other-1","page":"Functions","title":"Other","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Modules = [Pipeline  ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"contents.html#","page":"Overview","title":"Overview","text":"CurrentModule = RvSpectML","category":"page"},{"location":"contents.html#API-Overview-1","page":"Overview","title":"API Overview","text":"","category":"section"},{"location":"contents.html#","page":"Overview","title":"Overview","text":"Pages = [\"modules.md\",\"functions.md\", \"types.md\", \"internals.md\"]\nDepth = 5","category":"page"},{"location":"longlist.html#","page":"Index","title":"Index","text":"CurrentModule = RvSpectML","category":"page"},{"location":"longlist.html#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"longlist.html#","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = RvSpectML","category":"page"},{"location":"index.html#RvSpectML-1","page":"Home","title":"RvSpectML","text":"","category":"section"},{"location":"index.html#Getting-Started-1","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Install Julia 1.5.  On Penn State's ICS-ACI, it is avaliable at  /gpfs/group/ebf11/default/julia/bin/julia.\nInstall the RvSpectML package and it's dependencies.  From julia","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/eford/RvSpectML.jl\")\nPkg.instantiate()","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Create a file examples/data_paths.jl specifying what directories on your system contain the relevant input data files.  For the two example scripts, you'd set  solar_data_path and/or expres_data_path like.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"solar_data_path = \"/gpfs/group/ebf11/default/ebf11/neid_solar/data\"\nexpres_data_path = \"/gpfs/group/ebf11/default/ebf11/expres/inputs/\"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"which are the paths to the required files for the examples ICS-ACI.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Start julia in the RvSpectML directory and activate the associated Project.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"> julia --project=.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Run an example script or two.  E.g.,","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"include(\"examples/neid_pipeline_1.jl\")\ninclude(\"examples/expres_pipeline_1.jl\")","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Tinker with some of the parameters in examples/param.jl or the example scripts.\nLet us know as you encounter any issues.","category":"page"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"CurrentModule = RvSpectML","category":"page"},{"location":"internals.html#RvSpectML-Internals-1","page":"Internals","title":"RvSpectML Internals","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"As a heads up, these functions and types are more likely to change going forward than functions and types that are exported.  ","category":"page"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]\nDepth = 3","category":"page"},{"location":"internals.html#Functions-1","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"internals.html#General-purpose-1","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML ]\nPublic = false\nOrder = [ :function ]","category":"page"},{"location":"internals.html#Base.getindex-Union{Tuple{CLT}, Tuple{CLT,Any}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.getindex","text":"Allow direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals.html#Base.setindex!-Union{Tuple{CLT}, Tuple{CLT,Any,CLT}} where CLT<:AbstractChunkList","page":"Internals","title":"Base.setindex!","text":"Allow direct access to data, an AbstractArray of ChunkOfSpectrum's via [] operator \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.allequal-Union{Tuple{AbstractArray{T,1}}, Tuple{T}} where T<:Real","page":"Internals","title":"RvSpectML.allequal","text":"Return true if all elements of array are equal to each other. \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.bin_times-Union{Tuple{AT}, Tuple{T}, Tuple{AbstractSpectralTimeSeriesCommonWavelengths,AT,Integer}} where AT<:AbstractArray{T,1} where T<:Real","page":"Internals","title":"RvSpectML.bin_times","text":"bintimes() Bins times from a SpectralTimeSeriesCommonWavelengths object using the groupings from timeidx in the metadata.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.calc_d2fluxdlnlambda2!-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T1,1},AbstractArray{T2,1}}} where T3<:Real where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.calc_d2fluxdlnlambda2!","text":"Estimate numerical second derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.calc_dfluxdlnlambda!-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},AbstractArray{T3,1}}} where T3<:Real where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.calc_dfluxdlnlambda!","text":"Estimate numerical derivative of fluxes given wavelengths. \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.calc_line_bisector_at_frac_depth-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},Real}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.calc_line_bisector_at_frac_depth","text":"calclinebisectoratfracdepth(λ, flux, fracdepth ) Returns the line average of wavelengths (units of λ) at specified fractional line depth. Assumes continuum is the maximum flux provided.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.calc_line_width-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},Real}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.calc_line_width","text":"calclinebisectoratfracdepth(λ, flux, absdepth ) Returns the line average of wavelengths (units of λ) at specified absolute line depth. Assumes continuum is the maximum flux provided.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.calc_line_width-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1}}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.calc_line_width","text":"calclinewidth(λ, flux; frac_depth ) Returns the line width (units of λ) for specified fractional line depth (default of 0.5). Assumes continuum is the maximum flux provided.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.calc_snr-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,N} where N,AbstractArray{T2,N} where N}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.calc_snr","text":"Calculate total SNR in (region of) spectra. \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.check_if_line_match-Union{Tuple{T}, Tuple{Real,AbstractArray{T,1}}} where T<:Real","page":"Internals","title":"RvSpectML.check_if_line_match","text":"checkifline_match ( λ, list ; threshold ) Return true if list contains a wavelength differing from λ by no more than threshold (in units of Δλ/λ)\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.find_cols_to_fit-Union{Tuple{T}, Tuple{AbstractArray{T,1},Real,Real}} where T<:Real","page":"Internals","title":"RvSpectML.find_cols_to_fit","text":"Return a range of columns indices with wavelengths between linelo and linehi \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.find_cols_to_fit-Union{Tuple{T}, Tuple{AbstractArray{T,1},Real}} where T<:Real","page":"Internals","title":"RvSpectML.find_cols_to_fit","text":"Return a range of columns indices with wavelengths within Δ of line_center \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.find_line_best","page":"Internals","title":"RvSpectML.find_line_best","text":"Return (pixels, order) pair that contain \"best\" region of spectra, based on highest SNR. \n\n\n\n\n\n","category":"function"},{"location":"internals.html#RvSpectML.find_orders_with_line-Union{Tuple{T}, Tuple{Real,AbstractArray{T,2}}} where T<:Real","page":"Internals","title":"RvSpectML.find_orders_with_line","text":"Return list of all orders that contain a pixel with wavelength lambda \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.find_orders_with_line-Union{Tuple{T}, Tuple{Real,Real,AbstractArray{T,2}}} where T<:Real","page":"Internals","title":"RvSpectML.find_orders_with_line","text":"Return list of all orders that contain all pixels with wavelengths between goallo and goalhi \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.find_pixels_for_line_in_chunk-Tuple{AbstractChuckOfSpectrum,Real,Real}","page":"Internals","title":"RvSpectML.find_pixels_for_line_in_chunk","text":"Find pixels included in a range of wavelengths \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.find_which_line_fits_in_line_list-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1}}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.find_which_line_fits_in_line_list","text":"findwhichlinefitsinlinelist( fitlist, linelist; threshold ) Return list of Bools indicatin which line(s) from fitlist match a line in linelist to within threshold (in units of Δλ/λ) Warning: Untested\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.find_worst_telluric_in_each_chunk-Union{Tuple{AS}, Tuple{AbstractChunkListTimeseries,AbstractArray{AS,1}}} where AS<:AbstractSpectra","page":"Internals","title":"RvSpectML.find_worst_telluric_in_each_chunk","text":"findworsttelluricineachchunk( chunklisttimeseries, arrayof_spectra ) Returns a vector of the worst telluric (i.e., smallest value) within each chunk at any observations.\n\nWarning: Assumes a tellurics value in metadata for each spectra, such as is provided by EXPRES.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.findall_line","page":"Internals","title":"RvSpectML.findall_line","text":"Return list of (pixels, order) pairs that contain pixels with desireed wavelengths.     Excludes locations that contain any pixels with var == NaN.\n\n\n\n\n\n","category":"function"},{"location":"internals.html#RvSpectML.findargminmax-Tuple{Any}","page":"Internals","title":"RvSpectML.findargminmax","text":"findargminmax(a) Return (argmin, min, argmax, max) Adapapted from https://github.com/JuliaLang/julia/blob/697e782ab86bfcdd7fd15550241fe162c51d9f98/base/array.jl#L2191\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.get_λs-Union{Tuple{AR}, Tuple{V1}, Tuple{T1}, Tuple{V1,AR}} where AR<:AbstractUnitRange where V1<:AbstractArray{T1,1} where T1<:AbstractRange","page":"Internals","title":"RvSpectML.get_λs","text":"\" get_λs( grids::Vector{AbstractRange}, r::AbstractUnitRange ) Return range of wavelengths corresponding to indices in r from a vector of ranges. Useful for extracting wavelengths from a chunklist.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.interp_chunk_to_shifted_grid_linear!-Union{Tuple{AR}, Tuple{AC}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},AC,AR,Real}} where AR<:Union{AbstractArray{T2,1}, AbstractRange} where AC<:AbstractChuckOfSpectrum where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.interp_chunk_to_shifted_grid_linear!","text":"interpchunktogridlinear!( fluxout, varout, chunkofspectrum, wavelengths ) Return spectra interpolated onto a grid of points using linear interpolation.\n\nArguments:\n\nflux_out::AbstractArray\nvar_out::AbstractArray\nchunk::AbstractChunkOfSpectrum\ngrid::AbstractRange or AbstractArray\n\nAlters\n\nflux_out\nvar_out::AbstractArray\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.interp_chunk_to_shifted_grid_sinc!-Union{Tuple{AR}, Tuple{AC}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},AC,AR,Real}} where AR<:Union{AbstractArray{T2,1}, AbstractRange} where AC<:AbstractChuckOfSpectrum where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.interp_chunk_to_shifted_grid_sinc!","text":"interpchunktogridsinc!( fluxout, varout, chunkofspectrum, wavelengths ) Return spectra interpolated onto a grid of points using sinc interpolation.\n\nArguments:\n\nflux_out::AbstractArray\nvar_out::AbstractArray\nchunk::AbstractChunkOfSpectrum\ngrid::AbstractRange or AbstractArray\n\nAlters\n\nflux_out\nvar_out::AbstractArray\n\nReturns\n\nflux_out\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.interp_linear-Union{Tuple{}, Tuple{T2}, Tuple{T1}} where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.interp_linear","text":"interp_linear(;x1::T1,x2::T1,y1::T2,y2::T2,xpred::T1) Return result of simple linear interpolant at xpred. Does not test that xpred is between x1 and x2.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.make_vec_metadata_from_spectral_timeseries-Union{Tuple{AA}, Tuple{AA}, Tuple{AS}} where AA<:AbstractArray{AS,1} where AS<:AbstractSpectra","page":"Internals","title":"RvSpectML.make_vec_metadata_from_spectral_timeseries","text":"Extract the metadata from a time series of spectra and return it as an array. \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.multiple_append!-Union{Tuple{T}, Tuple{Array{T,1},Vararg{Any,N} where N}} where T<:Real","page":"Internals","title":"RvSpectML.multiple_append!","text":"A generalized version of the built in append!() function By Christian Gilbertson?\n\nTODO:  Ask Christian what the purpose of this is relative to std append\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.normalize_spectra!-Union{Tuple{AS}, Tuple{ST}, Tuple{ACLT}, Tuple{ACLT,AS}} where AS<:(AbstractArray{ST,N} where N) where ST<:AbstractSpectra where ACLT<:AbstractChunkListTimeseries","page":"Internals","title":"RvSpectML.normalize_spectra!","text":"Normalize each spectrum based on sum of fluxes in chunk_timeseries region of each spectrum. \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.predict_intrinsic_stellar_line_width-Tuple{Real}","page":"Internals","title":"RvSpectML.predict_intrinsic_stellar_line_width","text":"Estimate line width based on stellar Teff (K) and optionally v_rot (km/s).  Output in km/s.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.read_metradata_from_fits","page":"Internals","title":"RvSpectML.read_metradata_from_fits","text":"Read metadata in FITS header and return data for keys in fields_str/fields as a Dict. \n\n\n\n\n\n","category":"function"},{"location":"internals.html#RvSpectML.repack_flux_vector_to_chunk_matrix-Union{Tuple{CMT}, Tuple{AA4}, Tuple{T4}, Tuple{AA3}, Tuple{T3}, Tuple{AA2}, Tuple{T2}, Tuple{AA1}, Tuple{T1}, Tuple{AA1,AA2,AA3,CMT,AA4}} where CMT<:(AbstractArray{UnitRange{Int64},N} where N) where AA4<:AbstractArray{T4,1} where T4<:Real where AA3<:AbstractArray{T3,1} where T3<:Real where AA2<:AbstractArray{T2,1} where T2<:Real where AA1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.repack_flux_vector_to_chunk_matrix","text":"repackfluxvectortochunkmatrix(λ, flux, var, chunkmap, λc; alg ) Warning:  This doesn't work yet\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.searchsortednearest","page":"Internals","title":"RvSpectML.searchsortednearest","text":"searchsortednearest(a<:AbstractVector, x::Real; assumesorted = false )    searchsortednearest(a<:AbstractVector, x<:AbstractVector; assumesorted = false )\n\nFind the index of vector a where the value of a is closest to x.    All vectors are assumed to already be sorted.    To turn off assertions, set assume_sorted to true.\n\nCredit: traktofon @ https://discourse.julialang.org/t/findnearest-function/4143/4 Vector Vector version by Christian Gilbertson? issorted assertion and optional assume_sorted added by Eric Ford\n\n\n\n\n\n","category":"function"},{"location":"internals.html#Radial-Velocity-Related-1","page":"Internals","title":"Radial Velocity Related","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.CCF, RvSpectML.RVFromCCF, RvSpectML.DCPCA, RvSpectML.Scalpels, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nPublic = false\nOrder = [ :function ]","category":"page"},{"location":"internals.html#Base.length-Tuple{RvSpectML.CCF.AbstractLineList}","page":"Internals","title":"Base.length","text":"Return length of line linst. \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.calc_ccf_chunk_expr-Union{Tuple{AbstractChuckOfSpectrum}, Tuple{PlanT}, Tuple{AbstractChuckOfSpectrum,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Internals","title":"RvSpectML.CCF.calc_ccf_chunk_expr","text":"calcccfchunkexpr( chunk, ccfplan ) Convenience function to compute CCF for one chunk of spectrum. Uses experimental version of projectmaskexpr!. Need to understand why difference before merging this in.\n\nInputs:\n\nchunk\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\n\nReturn:\n\nCCF for one chunk of spectrum, evaluated using mask_shape and line list from ccf plan\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.calc_ccf_chunklist_expr-Union{Tuple{PlanT}, Tuple{AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Internals","title":"RvSpectML.CCF.calc_ccf_chunklist_expr","text":"calcccfchunklistexpr ( chunklist, ccfplans ) Convenience function to compute CCF based on a spectrum's chunklist. Experimental version, testing for general mask shapes.\n\nInputs:\n\nchunklist\nvector of ccf plans (one for each chunk)\n\nOptional Arguments:\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the line list and mask_shape from the ccf plan for each chunk.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.calc_ccf_chunklist_timeseries_expr-Union{Tuple{AbstractChunkListTimeseries}, Tuple{PlanT}, Tuple{AbstractChunkListTimeseries,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Internals","title":"RvSpectML.CCF.calc_ccf_chunklist_timeseries_expr","text":"calcccfchunklisttimeseriesexpr( chunklisttimeseries, linelist ) Convenience function to compute CCF for a timeseries of spectra, each with a chunklist. Uses multiple threads if avaliable. Experimental version trying to generalize mask shape\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\nverbose (false)\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the ccfplan. Note that the ccfplan provided is used as a template for creating a custom ccfplan for each chunk that     only includes lines that reliably appear in that order for all spectra in the chunklisttimeseries.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.calc_doppler_factor-Tuple{Real}","page":"Internals","title":"RvSpectML.CCF.calc_doppler_factor","text":"calc_doppler_factor(vel)\n\nCompute the longitudinal relativistic doppler factor given a velocity in meters per second.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.calc_order_ccf_chunklist_timeseries-Union{Tuple{AbstractChunkListTimeseries}, Tuple{PlanT}, Tuple{AbstractChunkListTimeseries,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Internals","title":"RvSpectML.CCF.calc_order_ccf_chunklist_timeseries","text":"calcorderccfchunklisttimeseries( chunklisttimeseries, ccfplan ) Convenience function to compute separate CCFs for each chunk (typically an order) of each spectrum in a timeseries.     CCF is evaluated using line list and mask_shape provided by the ccf plan for each chunk. Uses multiple threads if avaliable.\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\n\nReturn:\n\nA 3-d array containing the CCF at each (velocity, chunk, spectrum) Note that the ccfplan provided is used as a template for creating a custom ccfplan for each chunk that     only includes lines that reliably appear in that order for all spectra in the chunklist_timeseries.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.calc_order_ccfs_chunklist-Union{Tuple{AbstractChunkList}, Tuple{PlanT}, Tuple{AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan","page":"Internals","title":"RvSpectML.CCF.calc_order_ccfs_chunklist","text":"calcorderccfschunklist ( chunklisttimeseries, linelist ) Convenience function to compute separate CCFs for each chunk (typically an order) in a spectrum. CCF is evaluated using line list and maskshape provided by the ccf plan for each chunk.\n\nInputs:\n\nchunklist_timeseries\nvector of ccf plans (one for each chunk)\n\nReturn:\n\nA 2-d array containing the CCF at each (velocity, chunk)\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.find_bin_edges_opt-Union{Tuple{A}, Tuple{A}, Tuple{T}} where A<:AbstractArray{T,1} where T<:Real","page":"Internals","title":"RvSpectML.CCF.find_bin_edges_opt","text":"findbinedges( pixel_centers )\n\nInternal function used by project_mask!. TODO: OPT may be able to eliminate need for this memory allocation.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.project_mask_expr!-Union{Tuple{PlanT}, Tuple{A3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A2,A1,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan where A3<:AbstractArray{T1,1} where A2<:AbstractArray{T2,2} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.CCF.project_mask_expr!","text":"projectmaskexpr!( output, λs, ccfplan; shiftfactor, workspace )\n\nCompute the projection of the mask onto the 1D array of wavelengths (λs) at a given shift factor (default: 1). The mask is computed from the ccfplan, including a linelist and mask_shape (default: tophat).\n\nNote: Preliminary implementation for other maskshapes is in projectmask_expr!\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.project_mask_opt!-Union{Tuple{PlanT}, Tuple{A3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A2,A1,PlanT}} where PlanT<:RvSpectML.CCF.AbstractCCFPlan where A3<:AbstractArray{T1,1} where A2<:AbstractArray{T2,2} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.CCF.project_mask_opt!","text":"project_mask_opt!( output, λs, ccf_plan; shift_factor, workspace )\n\nCompute the projection of the mask onto the 1D array of wavelengths (λs) at a given shift factor (default: 1). The mask is computed from the ccfplan, including a linelist and mask_shape (default: tophat).\n\nNote: Preliminary implementation for other maskshapes is in projectmask_expr!\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.RVFromCCF.measure_rv-Union{Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2,A3}} where A3<:AbstractArray{T3,2} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.RVFromCCF.measure_rv","text":"measure_rv(wavs, spec, mask; fit_type=\"gaussian\")\n\nTODO: Need to update for CCF refactoring.\n\nCompute the cross correlation function and fit to calculate a velocity using the specified method. Valid arguments for fit_type include \"gaussian\", \"quadratic\", and \"centroid\".\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.RVFromCCF.prelim_fit-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.RVFromCCF.prelim_fit","text":"\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.RVFromCCF.rv_from_ccf_bestfit-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.RVFromCCF.rv_from_ccf_bestfit","text":"Report RV based on minimum of CCF WARNING:  This is highly pixelated and should be used for special purposes (e.g., initial guesses).\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.RVFromCCF.rv_from_ccf_centroid-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.RVFromCCF.rv_from_ccf_centroid","text":"Report RV based on centroid near minimum of CCF. WARNING:  Something's fishy with these.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.RVFromCCF.rv_from_ccf_gaussian-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.RVFromCCF.rv_from_ccf_gaussian","text":"Report RV base don fit Gaussian near minimum of CCF.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.RVFromCCF.rv_from_ccf_quadratic-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Internals","title":"RvSpectML.RVFromCCF.rv_from_ccf_quadratic","text":"Report RV based on fitting quadratic near minimum of CCF.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.LineFinder.find_line_candidates_in_chunk-Union{Tuple{T}, Tuple{AbstractChuckOfSpectrum,AbstractArray{T,1}}} where T<:Real","page":"Internals","title":"RvSpectML.LineFinder.find_line_candidates_in_chunk","text":"findlinescandidatesinchunk( chunk, plan ) Convenience function to find links in one chunk of spectrum.\n\nInputs:\n\nchunk\n\nOptional Arguments:\n\nReturn:\n\narray of ranges of pixels wihtin chunk\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.LineFinder.find_lines_in_chunk-Union{Tuple{AbstractChuckOfSpectrum}, Tuple{T}} where T<:Real","page":"Internals","title":"RvSpectML.LineFinder.find_lines_in_chunk","text":"findlinesin_chunk( chunk, plan ) Convenience function to find lines in one chunk of spectrum.\n\nInputs:\n\nchunk\n\nOptional Arguments:\n\nReturn:\n\nlinefitlist\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.LineFinder.find_lines_in_chunklist-Tuple{AbstractChunkList}","page":"Internals","title":"RvSpectML.LineFinder.find_lines_in_chunklist","text":"findlinesinchunklist ( chunklist, linelist ) Convenience function to find lines in each chunk of a spectrum.\n\nInputs:\n\nchunklist\n\nOptional Arguments:\n\nReturn:\n\nline_list\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.LineFinder.find_lines_in_chunklist_timeseries-Tuple{AbstractChunkListTimeseries}","page":"Internals","title":"RvSpectML.LineFinder.find_lines_in_chunklist_timeseries","text":"findlinesinchunklisttimeseries( chunklisttimeseries, linelist ) Convenience function to find lines in each chunk of each spectrum in a timeseries.\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nReturn:\n\nline_list\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.LineFinder.fit_line-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},AbstractArray{T3,1}}} where T3<:Real where T2<:Real where T1<:Real","page":"Internals","title":"RvSpectML.LineFinder.fit_line","text":"fitline( λ, flux, var ) Fits a basic Gaussian absorption line times a line (variable slope) to data. Returns a tuple of (param, χ²perdof, isconverged) Warning:  Has some hardcoded parameters that likely need to be generalized for different instruments.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#Interpolation-1","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPublic = false\nOrder = [ :function]","category":"page"},{"location":"internals.html#RvSpectML.SincInterpolation.create_filter_curve_orig-Tuple{Int64}","page":"Internals","title":"RvSpectML.SincInterpolation.create_filter_curve_orig","text":"Original author: Joe Ninan Converted to Julia and optimized by Christian Gilbertson & Eric Ford Returns a cubit interpolator for windowed sinc Filter curve. noofpoints: number of intepolation points to use in cubic inteprolator\n\n\n\n\n\n","category":"method"},{"location":"internals.html#Instrument-specific-1","page":"Internals","title":"Instrument specific","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.EXPRES, RvSpectML.HARPSN, RvSpectML.NEID, RvSpectML.TheoreticalInstrument  ]\nPublic = false\nOrder = [ :function]","category":"page"},{"location":"internals.html#RvSpectML.EXPRES.make_manifest-Tuple{String}","page":"Internals","title":"RvSpectML.EXPRES.make_manifest","text":"Create Dataframe containing filenames and key data for all files neid*.fits in directory\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.EXPRES.read_metadata-Tuple{String}","page":"Internals","title":"RvSpectML.EXPRES.read_metadata","text":"Create Dict containing filename and default metadata from file.\n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.NEID.read_differential_extinctions!","page":"Internals","title":"RvSpectML.NEID.read_differential_extinctions!","text":"Read space delimited file with differential extinction corrections, interpolate to bjd's in df and insert into df[:,diffextrv]. \n\n\n\n\n\n","category":"function"},{"location":"internals.html#Other-1","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [Pipeline  ]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"internals.html#Types-1","page":"Internals","title":"Types","text":"","category":"section"},{"location":"internals.html#General-purpose-2","page":"Internals","title":"General purpose","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals.html#RvSpectML.ChunkWidthFuncOfλ","page":"Internals","title":"RvSpectML.ChunkWidthFuncOfλ","text":"Functor to return a scale factor for chunk widths that depends on the chunk's central wavelength.\n\nTODO: Replace with something useful, e.g., uses actual PSF behavior as function of wavelength\n\n\n\n\n\n","category":"type"},{"location":"internals.html#Radial-Velocity-Related-2","page":"Internals","title":"Radial Velocity Related","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.CCF, RvSpectML.RVFromCCF, RvSpectML.DCPCA, RvSpectML.Scalpels, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals.html#RvSpectML.CCF.CosCCFMask","page":"Internals","title":"RvSpectML.CCF.CosCCFMask","text":"CosCCFMask Cosine mask with one parameter, it's quarter period, i.e., where to truncate it, as a velocity in m/s. Mask weights are stored separately in a line list.\n\n\n\n\n\n","category":"type"},{"location":"internals.html#RvSpectML.CCF.CosCCFMask-Tuple{AbstractInstrument}","page":"Internals","title":"RvSpectML.CCF.CosCCFMask","text":"CosCCFMask( inst  ) \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.CosCCFMask-Tuple{Real}","page":"Internals","title":"RvSpectML.CCF.CosCCFMask","text":"Functor for returning PSF for Δv <= half_width.  \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.GaussianCCFMask","page":"Internals","title":"RvSpectML.CCF.GaussianCCFMask","text":"GaussianCCFMask A truncated Gaussian mask with two parameters, it's stdandard deviation and where to truncate it, both as a velocity in m/s. Mask weights are stored separately in a line list.\n\n\n\n\n\n","category":"type"},{"location":"internals.html#RvSpectML.CCF.GaussianCCFMask-Tuple{AbstractInstrument}","page":"Internals","title":"RvSpectML.CCF.GaussianCCFMask","text":"GaussianCCFMask( inst ; scale_factor ) \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.GaussianCCFMask-Tuple{Real}","page":"Internals","title":"RvSpectML.CCF.GaussianCCFMask","text":"Functor for returning PSF for Δv <= half_width.  \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.SuperGaussianCCFMask","page":"Internals","title":"RvSpectML.CCF.SuperGaussianCCFMask","text":"SuperGaussianCCFMask A truncated Gaussian mask with two parameters, it's stdandard deviation and where to truncate it, both as a velocity in m/s. Mask weights are stored separately in a line list.\n\nTODO: Repalce Gaussian with super-Gaussian Warning:  Not implemented/tested yet.\n\n\n\n\n\n","category":"type"},{"location":"internals.html#RvSpectML.CCF.SuperGaussianCCFMask-Tuple{AbstractInstrument}","page":"Internals","title":"RvSpectML.CCF.SuperGaussianCCFMask","text":"SuperGaussianCCFMask( inst ; scale_factor ) \n\n\n\n\n\n","category":"method"},{"location":"internals.html#RvSpectML.CCF.SuperGaussianCCFMask-Tuple{Real}","page":"Internals","title":"RvSpectML.CCF.SuperGaussianCCFMask","text":"Functor for returning PSF for Δv <= half_width.  \n\n\n\n\n\n","category":"method"},{"location":"internals.html#Interpolation-2","page":"Internals","title":"Interpolation","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals.html#Instrument-specific-2","page":"Internals","title":"Instrument specific","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [RvSpectML.EXPRES, RvSpectML.HARPSN, RvSpectML.NEID, RvSpectML.TheoreticalInstrument  ]\nPublic = false\nOrder = [:type ]","category":"page"},{"location":"internals.html#Other-2","page":"Internals","title":"Other","text":"","category":"section"},{"location":"internals.html#","page":"Internals","title":"Internals","text":"Modules = [Pipeline  ]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"modules.html#","page":"Modules","title":"Modules","text":"CurrentModule = RvSpectML","category":"page"},{"location":"modules.html#RvSpectML-Modules-1","page":"Modules","title":"RvSpectML Modules","text":"","category":"section"},{"location":"modules.html#","page":"Modules","title":"Modules","text":"Pages = [\"modules.md\"]\nDepth = 3","category":"page"},{"location":"modules.html#RV-Related-Algorithms-1","page":"Modules","title":"RV-Related Algorithms","text":"","category":"section"},{"location":"modules.html#","page":"Modules","title":"Modules","text":"Modules = [RvSpectML.CCF, RvSpectML.RVFromCCF, RvSpectML.DCPCA, RvSpectML.Scalpels, RvSpectML.LineFinder ] #, RvSpectML.PPCA ]\nOrder = [:module]","category":"page"},{"location":"modules.html#RvSpectML.CCF","page":"Modules","title":"RvSpectML.CCF","text":"Module for computing CCFs \n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.RVFromCCF","page":"Modules","title":"RvSpectML.RVFromCCF","text":"Module for estimating the radial velocity based on the CCF\n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.DCPCA","page":"Modules","title":"RvSpectML.DCPCA","text":"Module for performing a Doppler-constrained PCA analysis\n\nFor algorithm information, see:\n\nJones, Stenning, Ford et al. https://arxiv.org/abs/1711.01318\nSee also: Gilbertson, Ford, Jones & Stenning 2020 https://arxiv.org/abs/2009.01085\n\nAuthor: Eric Ford Date:   September 2020\n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.Scalpels","page":"Modules","title":"RvSpectML.Scalpels","text":"Module for performing Scalpels (Self-Correlation Analysis of Line Profiles for Extracting Low-amplitude Shifts) based on a CCF timeseries.\n\nFor algorithm information, see Collier-Cameron, Ford, Shahaf et al. 2020\n\nAuthor: Eric Ford Date:   September 2020\n\n\n\n\n\n","category":"module"},{"location":"modules.html#Interpolation-Algorithms-1","page":"Modules","title":"Interpolation Algorithms","text":"","category":"section"},{"location":"modules.html#","page":"Modules","title":"Modules","text":"Modules = [RvSpectML.LinearInterpolation, RvSpectML.SincInterpolation, RvSpectML.TemporalGPInterpolation ]  # RvSpectML.GPInterpolation,\nOrder = [:module]","category":"page"},{"location":"modules.html#RvSpectML.LinearInterpolation","page":"Modules","title":"RvSpectML.LinearInterpolation","text":"Module with wrappers for performing linear interpolation..\n\nAuthor: Eric Ford\n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.SincInterpolation","page":"Modules","title":"RvSpectML.SincInterpolation","text":"Module for performing Sinc interpolation From https://github.com/christiangil/GP-Research/blob/master/julia/src/interpolationfunctions.jl https://github.com/christiangil/GP-Research/blob/master/julia/src/generalfunctions.jl\n\nAuthors: Joe Ninan (original)          Christian Gilbertson (Converted to Julia and optimized)          Eric Ford (Further adapted/optimizations)\n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.TemporalGPInterpolation","page":"Modules","title":"RvSpectML.TemporalGPInterpolation","text":"Module for interpolating via Gaussian Process Regression based on Stheno and TemporalGPs packages.\n\n\n\n\n\n","category":"module"},{"location":"modules.html#Instrument-specific-Modules-1","page":"Modules","title":"Instrument-specific Modules","text":"","category":"section"},{"location":"modules.html#","page":"Modules","title":"Modules","text":"Modules = [EXPRES, HARPSN, NEID, TheoreticalInstrument  ]\nOrder = [:module]","category":"page"},{"location":"modules.html#RvSpectML.EXPRES","page":"Modules","title":"RvSpectML.EXPRES","text":"Module providing types and traits and customized functions for the EXPRES Spectrograph.     http://exoplanets.astro.yale.edu/expresBlog/     https://ui.adsabs.harvard.edu/abs/2016SPIE.9908E..6TJ/abstract\n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.HARPSN","page":"Modules","title":"RvSpectML.HARPSN","text":"Module providing types and traits and customized functions for the HARPS-N Spectrograph.\n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.NEID","page":"Modules","title":"RvSpectML.NEID","text":"Module providing types and traits and customized functions for the NEID Spectrograph.\n\n\n\n\n\n","category":"module"},{"location":"modules.html#RvSpectML.TheoreticalInstrument","page":"Modules","title":"RvSpectML.TheoreticalInstrument","text":"Module providing types and traits and customized functions for a generic theoretical spectrograph.\n\n\n\n\n\n","category":"module"},{"location":"modules.html#Other-Modules-1","page":"Modules","title":"Other Modules","text":"","category":"section"},{"location":"modules.html#","page":"Modules","title":"Modules","text":"Modules = [Pipeline  ]\nOrder = [:module]","category":"page"},{"location":"modules.html#RvSpectML.Pipeline","page":"Modules","title":"RvSpectML.Pipeline","text":"The PipelinePlan stores what work needs to be done, what plots should be made, and what data/plots should be saved to disk. Users will querty it via  needto(plan, symbol), makeplot(plan, symbol), saveplot(plan, symbol), and savedata(plan, symbol). Users can update the plan with makeplot!(plan, symbol),  dontmake_plot!(plan, symbol), etc.\n\nIn principle, we could cache data here, too.  But I'm not sure if we'll actulaly use that.  So consider the cache as experimental.\n\n\n\n\n\n","category":"module"}]
}
